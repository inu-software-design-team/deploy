server {
    listen 80;
    server_name cozzy.duckdns.org;

    # Let's Encrypt 인증서 갱신을 위한 경로는 HTTP에서도 계속 필요합니다.
    # Certbot이 갱신 시 이 경로를 통해 도메인 소유권을 다시 확인할 수 있습니다.
    location /.well-known/acme-challenge/ {
        root /var/www/certbot; 
    }

    location / {
        #return 200 "Nginx Port 80 OK - test successful";
        #add_header Content-Type text/plain;
        return 301 https://$host$request_uri;
    }
}

# HTTPS 서버
server {
    listen 443 ssl http2; # http2 활성화 (최신 Nginx에서는 listen 443 ssl; http2 on; 으로 분리 권장)
    # 중요: 실제 사용하시는 도메인으로 정확히 입력해주세요.
    server_name cozzy.duckdns.org;

    # SSL 인증서 파일 경로 (Certbot이 생성한 경로)
    ssl_certificate /etc/letsencrypt/live/cozzy.duckdns.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cozzy.duckdns.org/privkey.pem;

    location / {
        proxy_pass http://frontend:3000; # Docker Compose 서비스 이름 사용
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade; # WebSocket 등을 위한 설정
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host; # 원래 요청의 호스트 헤더 전달
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr; # 실제 클라이언트 IP 전달
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 프록시 체인 IP 전달
        proxy_set_header X-Forwarded-Proto $scheme; # "https" 스킴 전달
    }

    location /api {
        proxy_pass http://backend:4000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # HTTPS로 통신 중임을 백엔드에 알림
    }
}
